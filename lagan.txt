Q.Why plural sigt bought codeshcool?
A.
->more fun, more engaging, and overall more effective
->focus on new developers

-> coding in browser, video, gamifiation
-> offers dozens of instructional courses, videos for developers 
-> both online and mobile apps

-> aquisition 6th in 18 months
-> buy smaller company to expand its footprint in the learning industries

-> putting against competitors like lynda.com, skillsoft
-> other aquisiton : smarterer, digital tutoros
-> grow catalog more than 4000 courses.

In addition, the CEO says that when it came time to acquire a “learn-to-code” platform, they decided to seek out Code School because it was “more fun, more engaging, and overall more effective” than others in the space

According to Pluralsight CEO Aaron Skonnard, Code School’s focus on new developers was part of the reason why it was interested in the property.

codeschool
founded: 2011, location: Orlando, FL, categories, wed development, education

---
gregg pollock
https://www.youtube.com/watch?list=PLfBoZfyUGYQaZGok4uZtPHMw3PKtHfWY9&time_continue=6&v=X1jvuBV4Em8
Gregg Pollack Founder's Talk - Part 3

---
railsenvy
creating videos, podcast, presenting at  technology events.
developing enterprise level technology using newest proven internet technologies

Halogen guides
Created cutting edge web application in ruby on rails
Developed core technology for rapidly building and deploying guide websites

---
complex things seem not so complex
hight quality product
what is important
---
40k -> 5lakh -> 1million signups
mobile application -> watch , rewatch  videos
---
Over 2013 and 2014 combined, Pluralsight has bought companies including PeepCode, Tekpub, TrainSignal, and Digital-Tutors. Combined, all its properties have just over 3 million users, the majority of them paying customers
---
Code School, a team of 39, will continue to operate from Orlando.
“I’m most excited about joining Pluralsight because our vision and culture aligns so precisely,” says Pollack. “They have an amazing leadership team, a really bright future, and we’re all really excited to be a part of it.”
---
crunchboard
---
Much of the content in the new app is free, while those who subscribe to Code School’s premium product will be able to unlock all videos. The app, however, is meant to complement but not replace Code School’s online educational resource, which is where developers learn hands-on by coding in the browser while watching screencasts and other course videos.
---
A Community First, A Business Second

The idea for Code School came about through Pollack’s own interest in creating educational content for developers, which he began doing around eight years ago. His focus at the time was the then still relatively new framework, Ruby on Rails. “As with any new technology in its infancy, the documentation sucked,” Pollack explains. “So I would blog about it. I got into podcasting; I would go and speak at conferences about it; I would create videos about it…it was just something I would do in my spare time,” he says.
---
blog, podcast, video, speak at conference
---
For his day job, Pollack consulted, eventually rebranding his consultancy to “Envy Labs” around five years ago. All the educational material he was publishing was attracting clients, but he wasn’t trying to turn that content into a money-making business of its own at that point, he says.
---
But in November 2010, Pollack released what soon became a popular course, “Rails for Zombies,” where he combined video content with coding in the browser for the first time. This was long before other online “learn to code” startups even existed — for instance, competitor Codecademy wasn’t founded until the following year
---
By March 2011, that business idea became Code School, launching with just one free Rails course and one paid. Today, the site has grown to include over 40 courses across a variety of topics and designed for a wide range of developers, from the newcomers looking to learn coding for the first time, to more advanced developers looking to refine or expand their skills

---
Now the company is working to reach an audience who is interested in learning while on the go with its new app. Though, obviously, the app doesn’t include the ability to code alongside the videos, it can serve as a way to reinforce what you previously learned while practicing on the web, familiarize yourself with new topics, or just brush up on rusty skills.
---
profitable since the beginning

t may take six people three months to make just five hours of content, he notes. 
What we’re creating is more like creating a video game than just a screencast,” he says
---
company claims customers including Accenture, Booz Allen Hamilton, Zendesk, and Fandango as using its product.
---
CodeSchool Technologies is the emerging and rapidly growing software development company. We have team of software engineers who are experts in their respective domains like Android, iOS, Java, Web development....

---
how to build it?
write mockup of it on paper
no videos, 
no effects
no images
write few screens, pages
less functionality
no payments unless feature
no login
---
community first, game the learning, consultancy, profit from first day,
start what you learn first, blog, podcoast, speak at conference, video
launch with small one, niche, limited content, expand the team, course, 
structure around same thing
----
check other founder talks
---
Jan. 24 (Bloomberg) -- Zach Sims, co-founder of Codecademy, talks about the importance of learning programming skills. Codecademy is a website that teaches how to write code for free.
     Sims speaks with Emily Chang on Bloomberg Television's "Bloomberg West." (Source: Bloomberg)
SHOW MORE

https://www.youtube.com/watch?v=43qcEw59mYA
https://www.youtube.com/watch?v=Jbv5KSWTB44
The Right Way To Drop Out Of College - Zach Sims
https://www.youtube.com/watch?v=Amg7wIifc6o
---

https://app.curiositystream.com/video/1697/stephen-hawkings-favorite-places
---
reading + doing  = better learning
books
how will survive?
different forms of publishing
 video, watching telivision, youtube
---
passive learning

codeschool
 bottle neck
   video
   effects
   themes

codeacademy
 overcomes
 its loss but scales fast
 ---
 drop out of college
 y u  no keep learning?

 drop out of college, not out education
 https://www.youtube.com/watch?v=Amg7wIifc6o
 ----
 multiplayer 
 codepeople, code community
 where people can come online
 every person have avatars
 i dont want to be  avatar like people
 but avatars like rock, tree, only circle with user photo is okay
 no music, no videos unless education
 buble chat like in whats app to talk
 ----
 play video youtube, real time streaming
 run code online
 pair buddies to learn
 ----
 coderooms like oyorooms
 like chat rooms
 but you can come discuss their
 ----
 peer to peer
 no server cost
 ----
 elixir
 check elixir, elm or reactive native
 elixir game programming
 good developer create his device too
 ---
 motion sensors for walking
 use two finger like walking
 turn left, turn right, go always, stop, reverse
 webcamera, visual gesture detection
 or blootooth rings 
 ----
 codeworld
 codegame
 codeschoolgame
----
talk what you learn
in person, teaching, telling
sharing
---
publishing methods
---
game bots
---
even 3d some time,
but not limited by assets,
but world okay some extens
bring your world, create world
normal words
----
on google earth walk on
---
real time multi player code learning 
---
attend online webinar, online  hackathon
---
part of one language community
elixir
join facebook group, stack overflow, forum
especially framework
pheonix 
---
https://www.youtube.com/watch?v=_i6n-eWiVn4&t=1s
write commetns
---
when you view video, like it if you like
write comment what you feel.
--
leave footprint
---
be active 
not passive
---
https://www.youtube.com/watch?v=sla-t0ZNlMU
Midwest.io 2014 - Designing a Real Time Game Engine in Erlang - Mark Allen
---
https://www.youtube.com/watch?v=I5L9_cXwBcU
automatic building
automatic tree, forest
automatic animals
rivers flow
cloud rain
---
https://www.youtube.com/watch?v=I5L9_cXwBcU
Keith Salisbury - Building Multiplayer Games with Phoenix and Phaser (ElixirConfEU 2016)


https://www.youtube.com/watch?v=lYQ3WwCMTJI
Crowd-controlling a game with Elixir and Phoenix - Andrea Leopardi
NoSlidesConf
512 views
----
Phaser?
fun, fast, free html5 game framework
amazing tutorial, great documentation

pheonix, elixir, erlang, phaser

pixi.js v3?
super fast Html5 2d rendering engine webgl fall back to canvas

html5?
offline storage, websocket, webworkers, device access,
multimedia, graphics and effects, css3

pheonix
easy - scalable -fast, friendly,  channels, es6/7 ready

elixir
meta programming, syntax,  macros, tooling

erlang
semantics, fault tolerant,  scalable, distributed

pixi
ultra fast, multi platform, multi touch, sprite sheet,
asset loader,  auto detect, asset loader, auto detect, rich text
---
more is better
different each more with color, shape, sound
---
phaser
preloader, physics, groups, sprites,  camera, particles, input, sound, tile maps 
scale manager
---
javascript game engine
---
social stats
---
mix pheonix.new demo
cd demo

install phaser
mkdir web/static/vendor/js/phaser
curl -L -o web/static/vendor/js/phaser/phaser.js \
https://raw.githubusercontent.com/photonstorm/phaser/master/build

Create a game class
export class Game extends Phaser.Game {
	// Initialize Phaser
	constructor(width, height, container) {
		super(width, height, Phaser.AUTO, container, null)
	}
}

---
create a new game instance
import  {Game} from "./Game"
#file: web/static/js/app.js

// Lets go
new Game(700, 450, "phaser")

---
set the page template
web/templates/page/index.html.eex
<div id="phaser"></div>
---
starting up the server
iex -S mix phoenix.server

---
games state
breaks game into smaller pieces

Phaser.state
---
github.com/ktec/phoenixphaserdemo
---
rocks.globalkeith.com
elixir conf.eu
dots.globalkeith.com
snake.
.com
---
elixir script
--
alexia stack
agents
---
functinal javascritp
ramda.js
kefir.js
Elm
hex package managers
---
phaser 3 aka lazer

---
building multiplayer game with pheonix, phaser
---
keith salisbury
---
job gap
4days a work
fri, satu, sunday holiday, passion day
---
constraint view of world donw
---
focus broad, you can not achieve
--
working full time remote
---
sENIOR PSYCHONAUTICS ENGINEER
https://en.wikipedia.org/wiki/Psychonautics
---
https://twitter.com/ktec
beach, road, hills, green tree
---
fidget spinner in space
continuosly spinning
move to horizontally left or right
---
https://en.wikipedia.org/wiki/Monoid
---Last 2 days finally taken my client from "Elixir-curious", to 4 Elixir apps (umbrella) in production. Next is React + D3 #myelixirstatus 😍
umbrella
---
medium.com
cartoonish
---
elixir, pheonix & d3
---
made a new toy
--
poloniex
---
exercism.io
purescript
elixirldn
--
erlang performance lab
---
what are you doing
are you not working on product portfolio
---
lets create phaser hello world examples
---
html5 game devs
---
https://phaser.io/examples
---
https://phaser.io/tutorials/getting-started/part3
--
If you're not comfortable with github cloning, or setting up a local web server, you can run phaser in the cloud.

More than a marketing buzzword, lots of developers like to build in the cloud so they can create, edit and share their content without having to install anything. Their files and code is available no matter which device they login from.

There are several JavaScript online collaboration tools such as JSBin, codepen and JSFiddle. But these are more for quick tests of single scripts. For a complete development environment we recommend Cloud9. It allows you get up and running very quickly as you'll see:
---
fruits and vegetable as user avatar
---
back to interactive course
technology of codestack
---
From what I can tell,

Front end:
HTML5, new tags such as <header> and <footer> but support for legacy browsers is carefully preserved
Javascript, jQuery is used. The console itself is based on a jQuery plugin called jq-console (https://github.com/amasad/jq-con...)
Processing input Javascript: It doesn't seem like they have a interpreter written from scratch but rather actually count on the browser's Javascript to interpret input and then capture the output.
Determining whether input is correct: The page is loaded with an "excerciseData" variable which contains individual exercises with Javascript test cases that are run against the output from processing user input. So whether a question is correct is determined on the client side. After the user hits "enter" in the console a POST request is made containing the user input and whether it satisfied the particular excercise

Back end:
Rails running on nginx + varnish
MongoDB for persistence
Standard AJAX for client - server communication
---
Eric and Zach gave great overviews of the front-end and back-end used by Codecademy. I’ll shine some additional light on what technology and software the company is using internally.Codecademy Technology stack includes: Adobe Flash, Babel, Elasticsearch, Filestack, GitHub, JavaScript, MongoDB, React.js, Redis, Ruby, Ruby on Rails, Amazon (CloudFront, EC2, Route 53, and S3), Chef, Gandi SSl, Go, HAProxy, Nagios, New Relic, nginx, Scalyr.

Additionally, here’s a list of other software products that Codecademy is using internally:

Marketing: Customer.io, Google Apps for Work, Mailgun, Segment
Sales and Support: Qualaroo, Zendesk
Analytics: Google Analytics, Mixpanel
HR: AngelList Jobs, HireArt, Lever
Finance and Accounting: Expensify
Productivity: Clerky, Slack
For a complete list of software used by Codecademy, check out the Codecademy Stack on Siftery

(Disclaimer: The above data was pulled from Siftery and has been verified by individuals working at
---
https://siftery.com/company/codecademy
to know which company uses what
for it, marketing, customer support and success, finance and accounting, hr
---
show partial data for free user 
for full feature ask to login, register
---
newrow
 create your online school, and deliver interactive content
fedena
--
company growth, technology stack
business model
---
Are you a giver or taker?
https://www.ted.com/talks/adam_grant_are_you_a_giver_or_a_taker#t-206570

less useful workers, low sales person are givers
they want to help other
they help other, they dont have time for themselves, energy
to complete their work.
---
givers to succeed
---
five minute favor
  making introduction
  little bit feedback
  sharing knowledge
  ---
  00:12
I want you to look around the room for a minute and try to find the most paranoid person here --


00:17
(Laughter)


00:18
And then I want you to point at that person for me.


00:21
(Laughter)


00:22
OK, don't actually do it.


00:23
(Laughter)


00:24
But, as an organizational psychologist, I spend a lot of time in workplaces, and I find paranoia everywhere. Paranoia is caused by people that I call "takers." Takers are self-serving in their interactions. It's all about what can you do for me. The opposite is a giver. It's somebody who approaches most interactions by asking, "What can I do for you?"


00:44
I wanted to give you a chance to think about your own style. We all have moments of giving and taking. Your style is how you treat most of the people most of the time, your default. I have a short test you can take to figure out if you're more of a giver or a taker, and you can take it right now.


00:59
[The Narcissist Test]


01:01
[Step 1: Take a moment to think about yourself.]


01:03
(Laughter)


01:04
[Step 2: If you made it to Step 2, you are not a narcissist.]


01:07
(Laughter)


01:09
This is the only thing I will say today that has no data behind it, but I am convinced the longer it takes for you to laugh at this cartoon, the more worried we should be that you're a taker.


01:19
(Laughter)


01:20
Of course, not all takers are narcissists. Some are just givers who got burned one too many times. Then there's another kind of taker that we won't be addressing today, and that's called a psychopath.


01:30
(Laughter)


01:32
I was curious, though, about how common these extremes are, and so I surveyed over 30,000 people across industries around the world's cultures. And I found that most people are right in the middle between giving and taking. They choose this third style called "matching." If you're a matcher, you try to keep an even balance of give and take: quid pro quo -- I'll do something for you if you do something for me. And that seems like a safe way to live your life. But is it the most effective and productive way to live your life? The answer to that question is a very definitive ... maybe.


02:01
(Laughter)


02:03
I studied dozens of organizations, thousands of people. I had engineers measuring their productivity.


02:10
(Laughter)


02:12
I looked at medical students' grades -- even salespeople's revenue.


02:17
(Laughter)


02:18
And, unexpectedly, the worst performers in each of these jobs were the givers. The engineers who got the least work done were the ones who did more favors than they got back. They were so busy doing other people's jobs, they literally ran out of time and energy to get their own work completed. In medical school, the lowest grades belong to the students who agree most strongly with statements like, "I love helping others," which suggests the doctor you ought to trust is the one who came to med school with no desire to help anybody.


02:48
(Laughter)


02:49
And then in sales, too, the lowest revenue accrued in the most generous salespeople. I actually reached out to one of those salespeople who had a very high giver score. And I asked him, "Why do you suck at your job --" I didn't ask it that way, but --


03:01
(Laughter)


03:02
"What's the cost of generosity in sales?" And he said, "Well, I just care so deeply about my customers that I would never sell them one of our crappy products."


03:11
(Laughter)


03:12
So just out of curiosity, how many of you self-identify more as givers than takers or matchers? Raise your hands. OK, it would have been more before we talked about these data.


03:22
But actually, it turns out there's a twist here, because givers are often sacrificing themselves, but they make their organizations better. We have a huge body of evidence -- many, many studies looking at the frequency of giving behavior that exists in a team or an organization -- and the more often people are helping and sharing their knowledge and providing mentoring, the better organizations do on every metric we can measure: higher profits, customer satisfaction, employee retention -- even lower operating expenses. So givers spend a lot of time trying to help other people and improve the team, and then, unfortunately, they suffer along the way. I want to talk about what it takes to build cultures where givers actually get to succeed.


04:05
So I wondered, then, if givers are the worst performers, who are the best performers? Let me start with the good news: it's not the takers. Takers tend to rise quickly but also fall quickly in most jobs. And they fall at the hands of matchers. If you're a matcher, you believe in "An eye for an eye" -- a just world. And so when you meet a taker, you feel like it's your mission in life to just punish the hell out of that person.


04:28
(Laughter)


04:29
And that way justice gets served.


04:31
Well, most people are matchers. And that means if you're a taker, it tends to catch up with you eventually; what goes around will come around. And so the logical conclusion is: it must be the matchers who are the best performers. But they're not. In every job, in every organization I've ever studied, the best results belong to the givers again.


04:51
Take a look at some data I gathered from hundreds of salespeople, tracking their revenue. What you can see is that the givers go to both extremes. They make up the majority of people who bring in the lowest revenue, but also the highest revenue. The same patterns were true for engineers' productivity and medical students' grades. Givers are overrepresented at the bottom and at the top of every success metric that I can track. Which raises the question: How do we create a world where more of these givers get to excel? I want to talk about how to do that, not just in businesses, but also in nonprofits, schools -- even governments. Are you ready?


05:24
(Cheers)


05:25
I was going to do it anyway, but I appreciate the enthusiasm.


05:28
(Laughter)


05:29
The first thing that's really critical is to recognize that givers are your most valuable people, but if they're not careful, they burn out. So you have to protect the givers in your midst. And I learned a great lesson about this from Fortune's best networker. It's the guy, not the cat.


05:46
(Laughter)


05:47
His name is Adam Rifkin. He's a very successful serial entrepreneur who spends a huge amount of his time helping other people. And his secret weapon is the five-minute favor. Adam said, "You don't have to be Mother Teresa or Gandhi to be a giver. You just have to find small ways to add large value to other people's lives." That could be as simple as making an introduction between two people who could benefit from knowing each other. It could be sharing your knowledge or giving a little bit of feedback. Or It might be even something as basic as saying, "You know, I'm going to try and figure out if I can recognize somebody whose work has gone unnoticed." And those five-minute favors are really critical to helping givers set boundaries and protect themselves.


06:27
The second thing that matters if you want to build a culture where givers succeed, is you actually need a culture where help-seeking is the norm; where people ask a lot. This may hit a little too close to home for some of you.


06:39
[So in all your relationships, you always have to be the giver?]


06:42
(Laughter)


06:43
What you see with successful givers is they recognize that it's OK to be a receiver, too. If you run an organization, we can actually make this easier. We can make it easier for people to ask for help. A couple colleagues and I studied hospitals. We found that on certain floors, nurses did a lot of help-seeking, and on other floors, they did very little of it. The factor that stood out on the floors where help-seeking was common, where it was the norm, was there was just one nurse whose sole job it was to help other nurses on the unit. When that role was available, nurses said, "It's not embarrassing, it's not vulnerable to ask for help -- it's actually encouraged."


07:18
Help-seeking isn't important just for protecting the success and the well-being of givers. It's also critical to getting more people to act like givers, because the data say that somewhere between 75 and 90 percent of all giving in organizations starts with a request. But a lot of people don't ask. They don't want to look incompetent, they don't know where to turn, they don't want to burden others. Yet if nobody ever asks for help, you have a lot of frustrated givers in your organization who would love to step up and contribute, if they only knew who could benefit and how.


07:47
But I think the most important thing, if you want to build a culture of successful givers, is to be thoughtful about who you let onto your team. I figured, you want a culture of productive generosity, you should hire a bunch of givers. But I was surprised to discover, actually, that that was not right -- that the negative impact of a taker on a culture is usually double to triple the positive impact of a giver. Think about it this way: one bad apple can spoil a barrel, but one good egg just does not make a dozen. I don't know what that means --


08:17
(Laughter)


08:18
But I hope you do.


08:19
No -- let even one taker into a team, and you will see that the givers will stop helping. They'll say, "I'm surrounded by a bunch of snakes and sharks. Why should I contribute?" Whereas if you let one giver into a team, you don't get an explosion of generosity. More often, people are like, "Great! That person can do all our work." So, effective hiring and screening and team building is not about bringing in the givers; it's about weeding out the takers. If you can do that well, you'll be left with givers and matchers. The givers will be generous because they don't have to worry about the consequences. And the beauty of the matchers is that they follow the norm.


08:57
So how do you catch a taker before it's too late? We're actually pretty bad at figuring out who's a taker, especially on first impressions. There's a personality trait that throws us off. It's called agreeableness, one the major dimensions of personality across cultures. Agreeable people are warm and friendly, they're nice, they're polite. You find a lot of them in Canada --


09:16
(Laughter)


09:18
Where there was actually a national contest to come up with a new Canadian slogan and fill in the blank, "As Canadian as ..." I thought the winning entry was going to be, "As Canadian as maple syrup," or, "... ice hockey." But no, Canadians voted for their new national slogan to be -- I kid you not -- "As Canadian as possible under the circumstances."


09:38
(Laughter)


09:41
Now for those of you who are highly agreeable, or maybe slightly Canadian, you get this right away. How could I ever say I'm any one thing when I'm constantly adapting to try to please other people? Disagreeable people do less of it. They're more critical, skeptical, challenging, and far more likely than their peers to go to law school.


10:00
(Laughter)


10:01
That's not a joke, that's actually an empirical fact.


10:03
(Laughter)


10:05
So I always assumed that agreeable people were givers and disagreeable people were takers. But then I gathered the data, and I was stunned to find no correlation between those traits, because it turns out that agreeableness-disagreeableness is your outer veneer: How pleasant is it to interact with you? Whereas giving and taking are more of your inner motives: What are your values? What are your intentions toward others?


10:25
If you really want to judge people accurately, you have to get to the moment every consultant in the room is waiting for, and draw a two-by-two.


10:32
(Laughter)


10:37
The agreeable givers are easy to spot: they say yes to everything. The disagreeable takers are also recognized quickly, although you might call them by a slightly different name.


10:50
(Laughter)


10:53
We forget about the other two combinations. There are disagreeable givers in our organizations. There are people who are gruff and tough on the surface but underneath have others' best interests at heart. Or as an engineer put it, "Oh, disagreeable givers -- like somebody with a bad user interface but a great operating system."


11:11
(Laughter)


11:13
If that helps you.


11:14
(Laughter)


11:16
Disagreeable givers are the most undervalued people in our organizations, because they're the ones who give the critical feedback that no one wants to hear but everyone needs to hear. We need to do a much better job valuing these people as opposed to writing them off early, and saying, "Eh, kind of prickly, must be a selfish taker."


11:33
The other combination we forget about is the deadly one -- the agreeable taker, also known as the faker. This is the person who's nice to your face, and then will stab you right in the back.


11:44
(Laughter)


11:46
And my favorite way to catch these people in the interview process is to ask the question, "Can you give me the names of four people whose careers you have fundamentally improved?" The takers will give you four names, and they will all be more influential than them, because takers are great at kissing up and then kicking down. Givers are more likely to name people who are below them in a hierarchy, who don't have as much power, who can do them no good. And let's face it, you all know you can learn a lot about character by watching how someone treats their restaurant server or their Uber driver.


12:19
So if we do all this well, if we can weed takers out of organizations, if we can make it safe to ask for help, if we can protect givers from burnout and make it OK for them to be ambitious in pursuing their own goals as well as trying to help other people, we can actually change the way that people define success. Instead of saying it's all about winning a competition, people will realize success is really more about contribution.


12:42
I believe that the most meaningful way to succeed is to help other people succeed. And if we can spread that belief, we can actually turn paranoia upside down. There's a name for that. It's called "pronoia." Pronoia is the delusional belief that other people are plotting your well-being.


12:59
(Laughter)


13:02
That they're going around behind your back and saying exceptionally glowing things about you. The great thing about a culture of givers is that's not a delusion -- it's reality. I want to live in a world where givers succeed, and I hope you will help me create that world.


13:20
Thank you.


13:21
(Applause)

Watch next
Your list (0)
My year of saying yes to everything
3.2M views
18:44

The surprising habits of original thinkers
6.6M views
15:25

----
pronoia
---
givers
matchers
 equivalent of affiliate
 find the customer, who is good fit for our product
 find customer for us
---
matchers
---
adding google translate to your website
---
https://www.w3schools.com/howto/tryit.asp?filename=tryhow_google_translate
<!DOCTYPE html>
<html lang="en-US">
<body>

<h1>My Web Page</h1>

<p>Hello everybody!</p>

<p>Translate this page:</p>

<div id="google_translate_element"></div>

<script type="text/javascript">
function googleTranslateElementInit() a
  new google.translate.TranslateElement({pageLanguage: 'en'}, 'google_translate_element');
}
</script>

<script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

<p>You can translate the content of this page by selecting a language in the select box.</p>

</body>
</html>
---
function googleTranslateElementInit() {
  new google.translate.TranslateElement({pageLanguage: 'en', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
}
---
function googleTranslateElementInit() {
  new google.translate.TranslateElement({pageLanguage: 'en', layout: google.translate.TranslateElement.InlineLayout.HORIZONTAL}, 'google_translate_element');
}
---
matchers
matchproduct
matchhunt
---
His name is Adam Rifkin. He's a very successful serial entrepreneur who spends a huge amount of his time helping other people. And his secret weapon is the five-minute favor. Adam said, "You don't have to be Mother Teresa or Gandhi to be a giver. You just have to find small ways to add large value to other people's lives." That could be as simple as making an introduction between two people who could benefit from knowing each other. It could be sharing your knowledge or giving a little bit of feedback. Or It might be even something as basic as saying, "You know, I'm going to try and figure out if I can recognize somebody whose work has gone unnoticed." And those five-minute favors are really critical to helping givers set boundaries and protect themselves.
---
Adam Rifkin is co-founder and CEO of PandaWhale, an online community of interesting things and people.

He is also co-founder of a 8000-person network of startup founders and engineers called 106 miles, which meets monthly in Silicon Valley, San Francisco, and Southern California.

From 2005 to 2009, Adam spent most of his time as co-founder and CEO of venture-backed startup Renkoo. 
---
https://www.crunchbase.com/person/adam-rifkin
---
rubyonrails blog tutorial
---
i have to work on my product
---
 i am not focusing
 --
 i can not do it
 its boring, but i have to
 i dont front end
 i dont how to complete
 ---
 elixir peer to peer 
 ---
 i want to join immediately any webinar right now
 or specifically technically webinar, design, marketing
 ---
 join elixirforum
 ---
 https://elixirforum.com/c/elixir-jobs
 ---
 elixir + react/redux
 ---
 htttp://omt.tech
 ---
 lets learn elixir + phoenix + elm tutorial
 ---
 https://leanpub.com/elixir-elm-tutorial/
 https://www.gitbook.com/book/bijanbwb/elixir-and-elm-tutorial/details
 ---
 elm game tutorial
 ---
 what is leanpub
 --
 http://codeloveandboards.com/blog/2017/02/02/phoenix-and-elm-a-real-use-case-pt-1/
 ---
 https://phoenix-and-elm.herokuapp.com/
 https://github.com/bigardone/phoenix-and-elm

 BOOM! THE BEST EYE-POPPING, TIME TRAVELLING PERSONALIZED GIFT EVER.
 https://thebookofeveryone.com/us
 https://thebookofeveryone.workable.com/

 https://thebookofeveryone.workable.com/j/56ADEDEB90
 ---
 elm architecture
 pet projects
 elixir
 passionate , talented team

 elixir + phoenix + elm + postgresql

 react js -> redux +reactjs -> elm
 ---
 how to start phoenix helloworld tutorial
 https://www.dailydrip.com/blog?tag=phoenix
 https://www.uvd.co.uk/blog/hack-week-things-elixir-phoenix-elm-mash/

 ---

Eddy
Developer
“What an exciting first day to UVD’s first ever hack week! I started off the week with Alex, VJ and Kenny on the Elixir and Docker team. We each had a smallish amount of Elixir experience and are pretty au fait with Docker, so we soon had a new Phoenix 1.3 application bootstrapped and running in a nice containerised environment.

With time of the essence we utilised phoenix generators as much as possible and pretty soon had our first endpoint fully functioning. We managed to add in some pretty powerful tests with ExUnit, a joy in a functional environment, and rounded off the day by adding release generator Distillery, ready to deploy to the cloud tomorrow!”
---
“Day one of the MEMZ hackathon took the front-end head first into the Elm world: learning the basics of Elm on the web, getting to grips with the language syntax and taking our first stab at implementing HTTP requests. Towards the end of the day we also managed to implement our first route, creating the landing page and the create-event pages.”
---
“On the second day of our hack week, I learned how to use The Guardian authentication library, and how to implement JSON Web Tokens for authentication in our application. We also found an Elixir plug, CorsPlug, to add CORS and let our front-end team call our endpoint and test if our authentication was functioning properly. When they gave us the okay, we ended the day by adding slugs to deal with weird inputs.”
---
https://hackernoon.com/how-elm-ports-work-with-a-picture-just-one-25144ba43cdd
https://github.com/rtfeldman/elm-spa-example
https://github.com/fbonetti/elm-phoenix-socket

https://traefik.io/
https://aws.amazon.com/ecs/
https://www.terraform.io/
https://prometheus.io/
https://github.com/slok/ecs-exporter
---
traefik
Features
It’s fast
No dependency hell, single binary made with go
Tiny official docker image
Rest API
Hot-reloading of configuration. No need to restart the process
Circuit breakers, retry
Round Robin, rebalancer load-balancers
Metrics (Rest, Prometheus, Datadog, Statd)
Clean AngularJS Web UI
Websocket, HTTP/2, GRPC ready
Access Logs (JSON, CLF)
Let’s Encrypt support (Automatic HTTPS with renewal)
Proxy Protocol support
High Availability with cluster mode (beta)
Supported backends
Docker / Swarm mode
Kubernetes
Mesos / Marathon
Rancher (API, Metadata)
Consul / Etcd / Zookeeper / BoltDB
Eureka
Amazon ECS
Amazon DynamoDB
File
Rest API
---
how to use phoenix react redux tutorial
https://www.dailydrip.com/blog/how-to-use-phoenix-with-webpack-react-redux
https://www.dailydrip.com/topics/elixir/drips/introduction-to-elixir
back to 
http://codeloveandboards.com/blog/2017/02/02/phoenix-and-elm-a-real-use-case-pt-1/
---
We are all set! Go into your application by running:

    $ cd phoenix_elm

Then configure your database in config/dev.exs and run:

    $ mix ecto.create

Start your Phoenix app with:

    $ mix phx.server

You can also run your app inside IEx (Interactive Elixir) as:

    $ iex -S mix phx.server


ikbhal@mobi MINGW64 /d/elixir_workspace
$ mix phoenix.gen.model Contact contacts first_name last_name gender:integer bir                                                                                                                th_date:date location phone_number email headline:text picture
** (Mix) The task "phoenix.gen.model" could not be found

ikbhal@mobi MINGW64 /d/elixir_workspace
$ ll
total 8
drwxr-xr-x 1 ikbhal 197121 0 Oct 21 13:20 hello/
drwxr-xr-x 1 ikbhal 197121 0 Oct 23 11:32 phoenix_elm/

ikbhal@mobi MINGW64 /d/elixir_workspace
$ cd phoenix_elm/

ikbhal@mobi MINGW64 /d/elixir_workspace/phoenix_elm
$ mix phoenix.gen.model Contact contacts first_name last_name gender:integer bir                                                                                                                th_date:date location phone_number email headline:text picture
mix phoenix.gen.model is deprecated. Use phx.gen.schema instead.
* creating web/models/contact.ex
* creating test/models/contact_test.exs
* creating priv/repo/migrations/20171023060647_create_contact.exs

Remember to update your repository by running migrations:

    $ mix ecto.migrate

